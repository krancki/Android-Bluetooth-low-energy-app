
#include <CurieBLE.h>
#include <CurieIMU.h>



int stepPIN = 2;
int dirPIN = 1;
int sleep=3;

int turnLeft = 12;
int turnRight = 13;


int dioda1 =8;
int dioda2 =9;
int dioda3 =10;
int dioda4 =11;

// Accelerometr params
  int _dir = 0;
  double _speed=1;
  int looper=0;
//
int modeActive=0;
boolean x= true;



BLEPeripheral blePeripheral;  // Bluetooth low energy naszego urz¹dzenia
BLEService engineService("19B10000-E8F2-537E-4F6C-D104768A1212"); // Nasz serwis 


// Characteristic dla naszego serwisu
BLECharCharacteristic    modeCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1212", BLERead | BLEWrite);
BLECharCharacteristic    turnCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1213", BLERead | BLEWrite);
BLEIntCharacteristic    stepsCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);


unsigned int level= 0;
unsigned int turn = 0;
unsigned int steps= 0;

void setup() {
  Serial.begin(9600);

  pinMode(stepPIN, OUTPUT);
  pinMode(dirPIN, OUTPUT);
  pinMode(sleep, OUTPUT);

  pinMode(turnLeft,INPUT_PULLUP);
  pinMode(turnLeft,INPUT_PULLUP);

  pinMode(dioda1,OUTPUT);
  pinMode(dioda2,OUTPUT);
  pinMode(dioda3,OUTPUT);
  pinMode(dioda4,OUTPUT);

  // Initialize device
  CurieIMU.begin();
  // set accelerometr range to 2G 
  CurieIMU.setAccelerometerRange(2);

  // set advertised local name and service UUID:
  blePeripheral.setLocalName("engineService");
  blePeripheral.setAdvertisedServiceUuid(engineService.uuid());


  // add service and characteristic:
  blePeripheral.addAttribute(engineService);
  blePeripheral.addAttribute(modeCharacteristic);
  blePeripheral.addAttribute(turnCharacteristic);
  blePeripheral.addAttribute(stepsCharacteristic);

  
  // Ustawienie wstêpne wartoœci dla trybu silnika
  modeCharacteristic.setValue(level);
  
  // Ustawienie wstêpne wartoœci dla kierunku silnika
  turnCharacteristic.setValue(turn);

  // Ustawienie wstêpne wartoœci dla iloœciu kroków
  turnCharacteristic.setValue(steps);

  //Rozpoczêcie udostêpniania BLE serwisu 
  blePeripheral.begin();

  Serial.println("BLE LED Peripheral");
}

void loop() {
  // listen for BLE peripherals to connect:
  BLECentral central = blePeripheral.central();

  
  // Je¿eli centrala po³¹czy siê z urz¹dzeniem:
  if (central) {
    Serial.print("Connected to central: ");
    // Wypisuje adres urz¹denia z którym jesteœmy pod³aczeni
    Serial.println(central.address());

    // Tak d³ugo jak jesteœmy pod³aczeni wykonuje sie pentla
    while (central.connected()) {

       
      // Je¿eli modeCharacteristic zosta³o nadpisane przez inne urz¹dzenie 
      if (modeCharacteristic.written()) {
        
        level=modeCharacteristic.value();
        Serial.print("Lebel:");
        Serial.println(level);
      }
      
      if (turnCharacteristic.written()) {

       
        turn=turnCharacteristic.value();
        Serial.print("Steps:");
        Serial.println(steps);

      }

      if (stepsCharacteristic.written()) {
         steps=stepsCharacteristic.value();
       
        Serial.print("Turn:");
        Serial.println(turn);
      }



        // Funkcja obs³ugi silnika
      engine();

   
      
    }

    // Roz³¹czenie siê z urz¹dzeniem :
    Serial.print(F("Disconnected from central: "));
    Serial.println(central.address());
  }
}


void setModeCharacteristicValue(int mode){
  level=mode;
  modeCharacteristic.setValue(level);
}

void engine(){

// Tryb czekania Off
if(level==0)
{
  digitalWrite(sleep,LOW);
  modeActive=0;
  delay(50);
}

//Tryb pierwszy
if(level==1){   
  modeActive=1;
}

//Tryb drugi
if(level==2){ 
  modeActive=2;
}

//Tryb trzeci 
if(level==3){  
  modeActive=3;
}

// Tryb czwarty akcelerometr
if(level==4)
{
 modeActive=4;
moveEngineAccelerometr();
}

// Tryb piaty  Losowy ruch 
if(level==5)
{
  
  for(int i=0; i<10;i++)
  {
    selectDiode( 1);
    delay(50);
    selectDiode( 2);
    delay(50);
    selectDiode( 3);
    delay(50);
  }
  autoMove();
  digitalWrite(sleep,LOW);
  modeActive=0;
  delay(2000);
    for(int i=0; i<10;i++)
  {
    selectDiode( 1);
    delay(50);
    selectDiode( 2);
    delay(50);
    selectDiode( 3);
    delay(50);
  }
  
  setModeCharacteristicValue(0);
}




// Wybieranie koloru diod wed³ug wybranego trybu
selectDiode( modeActive);


//Reczne sterowanie silnikiem (Wybieranie trybu 1,2,3)
if(modeActive ==1 || modeActive==2 || modeActive==3)
{
  for(int i = 0; i<steps;i++)
  {
    moveEngine(turn ,modeActive);
  }
   setModeCharacteristicValue(0);
}


}


void autoMove()
{
  int endPoint=4000;
  int startPoint = 0;
  int current =2000;
   for(int i=0; i<80;i++){
       int steps= random(50,400);
       int rapid= random(1,4);
       int vector= random(0,2);
   
       delay(80);
       for(int j=0;j<steps;j++)
       {
        
       
        if(current>startPoint && current<endPoint)
        {
           if(vector==0)
          {
            current--;
          }else
          {
            current++;
          }
        moveEngine(vector,rapid);
        }else
        {
          break;
        }
       }
       
      
  }


}


void moveEngine(int dir,int modeActive){
  
  if(dir==0){
      digitalWrite(dirPIN,LOW);
      
  }else{
      digitalWrite(dirPIN,HIGH);
  }
  engineStep(modeActive);
}


 void engineStep(int speedRotate)
 {
  
  digitalWrite(sleep,HIGH);
  digitalWrite(stepPIN, HIGH);
  delayMicroseconds(800*speedRotate);
  digitalWrite(stepPIN, LOW); 
 }




void moveEngineAccelerometr(){
  looper++;
  if(looper >100){
  readValueFromAccelerometr();
  
  looper=0;
  }
  moveEngine(_dir,_speed);
  
}





void readValueFromAccelerometr(){
  float ax, ay, az;   //scaled accelerometer values

  // read accelerometer measurements from device, scaled to the configured range
  CurieIMU.readAccelerometerScaled(ax, ay, az);
  // display tab-separated accelerometer x/y/z values
  Serial.print("a:\t");
  Serial.print(ay);
  Serial.println();
  if(ay>=0){
    _dir=0;
  }else{
    _dir=1;
  }

  _speed = 10*ay;

  if(_speed<0){
    _speed*=-1;
  }
  if(_speed<1)
  {
    _speed=1;
  }
}

void selectDiode(int modeActive)
{
  switch(modeActive)
  {
    case 0:
        digitalWrite(dioda1,LOW);
        digitalWrite(dioda2,LOW);
        digitalWrite(dioda3,LOW);
        digitalWrite(dioda4,HIGH);
    break;

      case 1:
        digitalWrite(dioda1,LOW);
        digitalWrite(dioda2,LOW);
        digitalWrite(dioda3,HIGH);
        digitalWrite(dioda4,LOW);
    break;

      case 2:
        digitalWrite(dioda1,LOW);
        digitalWrite(dioda2,HIGH);
        digitalWrite(dioda3,LOW);
        digitalWrite(dioda4,LOW);
    break;
      case 3:
        digitalWrite(dioda1,HIGH);
        digitalWrite(dioda2,LOW);
        digitalWrite(dioda3,LOW);
        digitalWrite(dioda4,LOW);
    break;

      case 4:
        digitalWrite(dioda1,LOW);
        digitalWrite(dioda2,HIGH);
        digitalWrite(dioda3,HIGH);
        digitalWrite(dioda4,HIGH);
    break;
  }
  
}

